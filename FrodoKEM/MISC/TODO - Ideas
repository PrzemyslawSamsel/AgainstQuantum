



1. Add tests more frequently => you write sth, you test it! (Deductive / Inductive => better?)
2. This program must be objective! Start writing classes
3. Use additional libraries instead of writing everything alone => python-mind!

4. Look at these declarations:

    (uint64_t)0x0000000000000001ULL,
    (uint64_t)0x0000000000008082ULL,
    (...)

    And you decided to zeroize uint64 if its above int range? And these c variables
    have negative values even though they're unsigned ? WTF is GOING ON??

5. WOW %lu instead of %d finally does not print these zeroes. WHAT NOW?
    have negative values even though they're unsigned ? WTF is GOING ON??
    
  
6. After implementing KEM, try to use some protocol, like TLS or sth to use this algorithm in communication effectively

7. TODO: src/sha3/keccak4x/KeccakP-1600-times4-SIMD256.c has some copyrights, check if any of the files have
them as well, and make sure to paste them at the beginning

# TODO: Add AVX support to execute code faster
https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX

HYLA:
* optymalization of the code will take time - what do i do?
* start new algorithm, or rather leave it for later or never?
* start making gui app for it or leave it as it is?
* include in my dissertation analysis of the entire library with these algorithms

# TODO: Compile it with optimalization for AVX for python - with
#  cdVirtual Env and so. There was an article about it, makes code 20x faster

From paper https://frodokem.org/files/FrodoKEM-specification-20190330.pdf => look at it
# Maybe you need to implement SHAKE-256 from shafips file?

Concretely,FrodoKEMis designed for IND-CCA security at three levels:
•FrodoKEM-640,  which  targets  Level  1  in  the  NIST  call  for  proposals  (matching  or  exceeding
  thebrute-force security of AES-128), and

•FrodoKEM-976,  which  targets  Level  3  in  the  NIST  call  for  proposals  (matching  or  exceeding
 thebrute-force security of AES-192).

•FrodoKEM-1344,  which  targets  Level  5  in  the  NIST  call  for  proposals  (matching  or  exceeding
  thebrute-force security of AES-256).


  Two variants of each of the above schemes are provided:

  •FrodoKEM-640-AES,FrodoKEM-976-AES, andFrodoKEM-1344-AES, which useAES128 to pseudoran-domly generate a large
  public matrix (calledA).

  •FrodoKEM-640-SHAKE,FrodoKEM-976-SHAKE,  and FrodoKEM-1344-SHAKE,  which use SHAKE128 to pseudorandomly generate
   the matrix.

The AES variants are particularly suitable for devices having AES hardware acceleration
(such as AES-NIon  Intel  platforms),  while  theSHAKEvariants  generally  provide  competitive  or
better  performance  incomparison with the AES variants in the absence of hardware acceleration.
In the remainder of this section, we outlineFrodoKEM’s scientific lineage, briefly explain our design
choices(with further details appearing in subsequent sections), and describe other features of our proposal
beyondthose explicitly requested by NIST.